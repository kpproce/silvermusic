{"version":3,"sources":["components/SongDetails3Table.js","components/SongList3TableFilter.js","components/MessagesTest.js","components/VideoPlayer.js","components/BootstrapNavbar.js","App.js","serviceWorker.js","index.js"],"names":["SongDetails3","song","this","props","index","title","artist","href","link","target","React","Component","SongList3TableFilter","state","filter","event","setState","value","type","onChange","e","handleChange","className","SongList","SongList1","item","includes","map","SongDetails3Table","Messages","handleFetchRead1","fetch","then","res","json","isLoaded","items","console","log","handleRerender","rer","toLowerCase","showModal","id","VideoPlayer","controls","url","Home","BootstrapNavbar","basename","Navbar","bg","variant","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","to","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55587ab6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SongDetails3 extends React.Component {\r\n    render () {\r\n      const  song = this.props.song\r\n      const index = this.props.index\r\n      return ( <tr> \r\n                  <td> {song.title}</td> \r\n                  <td> {song.artist} </td>  \r\n                  <td> {song.title}      </td> \r\n                  <td>\r\n                    <tr> <a href ={song.link} target=\"_blank\" >video</a> </tr>\r\n                    <tr> <a href ={song.link} target=\"_blank\" >akkooorden</a></tr>\r\n                </td>\r\n              </tr> ) \r\n  }\r\n}\r\nexport default SongDetails3","import React from 'react';\r\nimport SongDetails3Table from './SongDetails3Table';\r\nimport SongList from '../data/songs2.json';\r\n\r\nimport './songList.css';\r\n\r\nclass SongList3TableFilter extends React.Component {\r\n\r\n// *****************************************\r\n\r\n// deze versie leest de data uit bestand songs.json en filtert deze via state.filter\r\n\r\n// *****************************************\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n     filter: ''\r\n    } \r\n  }\r\n\r\n\r\nhandleChange(event) {\r\n  // hiermee zorg je er voor dat this.state.value actueel blijft en die zie je in de input\r\n  this.setState({filter: event.target.value});\r\n}\r\n   render () {\r\n    return ( \r\n    \t <div> \r\n        <h3>Songs</h3>  \r\n        <input type=\"text\" value={this.state.filter} onChange={(e) => this.handleChange(e)}/>\r\n        <table className=\"songlist\">\r\n        <tr> <th className=\"SLTH\">song </th> <th className=\"SLTH\"> artist </th> \r\n            <th className=\"SLTH\">afspraken</th> <th className=\"SLTH\"> Linkjes </th> </tr>  \r\n         \r\n          {\r\n          SongList.SongList1.filter(item => item.artist.includes(this.state.filter)).map((item, index)=> {\r\n              // map() heeft 2 standaard parameters, de eerste is \r\n              // een item uit de lijst en de tweede de index van \r\n              // dat item \r\n              // geef de song door aan de child\r\n            return <SongDetails3Table song = {item} index = {index}/>\r\n          })\r\n        }\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SongList3TableFilter","import React from 'react';\r\nimport './songList.css';\r\n\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// ----- MESSAGES dit is het component om messages om en om te laten zien\r\n\r\nclass Messages extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      isLoaded: false,\r\n      rer: \"leeg\",\r\n      items: [],\r\n      filter: '',\r\n    }\r\n  }\r\n\r\n  // This is the best place to make API calls since, at this point, \r\n  // the component has been mounted and is available to the DOM.\r\n\r\n  componentDidMount() {\r\n    //fetch('https://jsonplaceholder.typicode.com/users')\r\n    this.handleFetchRead1();\r\n  }\r\n\r\n  handleFetchRead1 = () => {\r\n    // fetch('http://localhost/php_api_test/apiBasic/read1.php?filter=message')\r\n    fetch('http://www.silvermusic.nl/test/apiBasic/read1.php')\r\n    .then(res => res.json())\r\n      .then(json => {\r\n        this.setState({ \r\n          isLoaded: true,\r\n          items: json\r\n        },\r\n        console.log(this.setState.items)\r\n        )\r\n      })\r\n  }\r\n\r\n  handleChange(event) {\r\n    // hiermee zorg je er voor dat this.state.value actueel blijft en die zie je in de input\r\n    this.setState(\r\n      {filter: event.target.value.toLowerCase()},\r\n    );\r\n  }\r\n\r\n  handleRerender = () => {\r\n    \r\n    // this.setState({rer: \"gewijzigd\"}, function() {alert(\"Messages zijn verouderd open messages opnieuw via menu--> messages\")} );\r\n     // setTimeout(function() { this.forceUpdate();} .bind(this), 10) \r\n     // setTimeout(function() {this.forceUpdate()} .bind(this), 1000)\r\n     this.handleFetchRead1();\r\n  }\r\n\r\n  render () {\r\n    \r\n    var { isLoaded, rer, items, showModal } = this.state;\r\n    \r\n    if (!isLoaded) {\r\n      return <div>Loading .... </div>\r\n    } \r\n    else {\r\n      return (\r\n        <>  \r\n          Filter messages: <input type=\"text\" value={this.state.filter} onChange={(e) => this.handleChange(e)}/><br/>\r\n          {\r\n            items.filter(item => (item.title.toLowerCase().includes(this.state.filter) || item.id.toLowerCase().includes(this.state.filter))).map((item, index)=> {\r\n              return (  \r\n                <>\r\n                {item['title']}   {item['message']} \r\n                <br/>  <br/>\r\n                </>\r\n               )\r\n            })\r\n          }\r\n        </>\r\n      )\r\n    } \r\n  }\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport SongList from '../data/songs2.json';\r\nimport './songList.css';\r\n\r\nimport ReactPlayer from 'react-player'\r\n\r\nclass VideoPlayer extends React.Component {\r\n\r\n// *****************************************\r\n   render () {\r\n    return (\r\n       <ReactPlayer controls= \"true\" url='https://youtu.be/DBOx_61h_NE' />\r\n    )\r\n  }\r\n}\r\n\r\nexport default VideoPlayer","import React from 'react'\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route, Link\r\n  } from \"react-router-dom\";\r\n  import { Navbar,Nav} from 'react-bootstrap'\r\n  import SongList3TableFilter from './SongList3TableFilter';\r\n  import Messages from './MessagesTest';\r\n\r\n  import VideoPlayer from './VideoPlayer';\r\n  import './basis.css';\r\n  \r\n  const Home = () => <div><h2>Home page</h2></div>\r\n\r\nclass BootstrapNavbar extends React.Component{\r\n    handleRerender = () => {\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <Router basename='/'>\r\n                            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\r\n                                <span className=\"menuWebsiteName\"> Silvermusic Huissen </span>\r\n                                <Navbar.Brand href=\"#home\"></Navbar.Brand>\r\n                                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                                    <Nav className=\"mr-auto\"> \r\n                                        <Link className=\"nav-link\" to='/Home' >Home</Link>\r\n                                        <Link className=\"nav-link\" to='/lijst' >Speellijst1</Link>\r\n                                        <Link className=\"nav-link\" to='/messages'>messages</Link>\r\n                                        <Link className=\"nav-link\" to='/player'>Video vb</Link>\r\n                                    </Nav>\r\n                                </Navbar.Collapse>\r\n                            </Navbar>\r\n                            <br />\r\n                            <Switch>\r\n                                <Route exact path=\"/\" component={Home} />          \r\n                                <Route path=\"/lijst\" component={SongList3TableFilter} />                                \r\n                                <Route path=\"/messages\" component={Messages} />       \r\n                                <Route path=\"/player\" component={VideoPlayer} />       \r\n                                {/* <Route path=\"/lijst\">   <SongList3TableFilter/> </Route>\r\n                                <Route path=\"/player\">  <VideoPlayer/>  </Route> */}\r\n                            </Switch>\r\n                        </Router>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )  \r\n    }\r\n}\r\n\r\nexport default BootstrapNavbar;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BootstrapNavbar from './components/BootstrapNavbar';\nimport './App.css';\n\nfunction App() {\n  return (\n      <>\n        <div>\n          <BootstrapNavbar/>\n        </div>  \n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}